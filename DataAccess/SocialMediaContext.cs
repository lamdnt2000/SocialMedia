// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace DataAccess
{
    public partial class SocialMediaContext : DbContext
    {
        public SocialMediaContext()
        {
        }

        public SocialMediaContext(DbContextOptions<SocialMediaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Channel> Channels { get; set; }
        public virtual DbSet<ChannelCrawl> ChannelCrawls { get; set; }
        public virtual DbSet<ChannelDetail> ChannelDetails { get; set; }
        public virtual DbSet<ChannelManagement> ChannelManagements { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<Criterion> Criteria { get; set; }
        public virtual DbSet<Gateway> Gateways { get; set; }
        public virtual DbSet<Hashtag> Hashtags { get; set; }
        public virtual DbSet<HashtagGroup> HashtagGroups { get; set; }
        public virtual DbSet<HashtagPost> HashtagPosts { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MediaItem> MediaItems { get; set; }
        public virtual DbSet<MediaType> MediaTypes { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Platform> Platforms { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<PostCrawl> PostCrawls { get; set; }
        public virtual DbSet<PostDetail> PostDetails { get; set; }
        public virtual DbSet<Rank> Ranks { get; set; }
        public virtual DbSet<RankType> RankTypes { get; set; }
        public virtual DbSet<Reaction> Reactions { get; set; }
        public virtual DbSet<ReactionType> ReactionTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Target> Targets { get; set; }
        public virtual DbSet<TargetType> TargetTypes { get; set; }
        public virtual DbSet<TransactionDeposit> TransactionDeposits { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Wallet> Wallets { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasOne(d => d.Platform)
                    .WithMany(p => p.Categories)
                    .HasForeignKey(d => d.PlatformId)
                    .HasConstraintName("FK_category_platform");
            });

            modelBuilder.Entity<Channel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Avatar).IsUnicode(false);

                entity.Property(e => e.Banner).IsUnicode(false);

                entity.Property(e => e.Cid).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Nickname).IsUnicode(false);

                entity.Property(e => e.OrganizationName).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);

                entity.HasOne(d => d.Criteria)
                    .WithMany(p => p.Channels)
                    .HasForeignKey(d => d.CriteriaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_channel_criteria");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.Channel)
                    .HasForeignKey<Channel>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_channel_channel_crawl");

                entity.HasOne(d => d.Id1)
                    .WithOne(p => p.Channel)
                    .HasForeignKey<Channel>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_channel_ChannelManagement");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Channels)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_channel_location");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Channels)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_channel_user");

                entity.HasOne(d => d.Platform)
                    .WithMany(p => p.Channels)
                    .HasForeignKey(d => d.PlatformId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_channel_platform");
            });

            modelBuilder.Entity<ChannelCrawl>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ChannelDetail>(entity =>
            {
                entity.HasOne(d => d.Channel)
                    .WithMany(p => p.ChannelDetails)
                    .HasForeignKey(d => d.ChannelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_channel_detail_channel");
            });

            modelBuilder.Entity<ChannelManagement>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Target)
                    .WithMany(p => p.ChannelManagements)
                    .HasForeignKey(d => d.TargetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChannelManagement_target");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_comment_post_crawl");
            });

            modelBuilder.Entity<Gateway>(entity =>
            {
                entity.Property(e => e.AccessKey).IsUnicode(false);

                entity.Property(e => e.BankCode).IsUnicode(false);

                entity.Property(e => e.BankTransNo).IsUnicode(false);

                entity.Property(e => e.SecretKey).IsUnicode(false);

                entity.Property(e => e.Type).IsFixedLength(true);
            });

            modelBuilder.Entity<HashtagGroup>(entity =>
            {
                entity.HasOne(d => d.Member)
                    .WithMany(p => p.HashtagGroups)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hashtag_group_user");
            });

            modelBuilder.Entity<HashtagPost>(entity =>
            {
                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.HashtagPosts)
                    .HasForeignKey(d => d.TagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hashtag_post_hashtag_group");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<MediaItem>(entity =>
            {
                entity.HasOne(d => d.MediaType)
                    .WithMany(p => p.MediaItems)
                    .HasForeignKey(d => d.MediaTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_media_item_media_type");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.MediaItems)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_media_item_posts");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.ChannelId).IsUnicode(false);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_user");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.Property(e => e.Pid).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);

                entity.HasOne(d => d.Channel)
                    .WithMany(p => p.Posts)
                    .HasForeignKey(d => d.ChannelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_posts_ChannelManagement");

                entity.HasOne(d => d.Hashtag)
                    .WithMany(p => p.Posts)
                    .HasForeignKey(d => d.HashtagId)
                    .HasConstraintName("FK_posts_hashtag");
            });

            modelBuilder.Entity<PostCrawl>(entity =>
            {
                entity.Property(e => e.Body).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Pid).IsUnicode(false);

                entity.Property(e => e.PostType).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);

                entity.HasOne(d => d.Channel)
                    .WithMany(p => p.PostCrawls)
                    .HasForeignKey(d => d.ChannelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_post_crawl_channel_crawl");

                entity.HasOne(d => d.Hashtag)
                    .WithMany(p => p.PostCrawls)
                    .HasForeignKey(d => d.HashtagId)
                    .HasConstraintName("FK_post_crawl_hashtag");
            });

            modelBuilder.Entity<PostDetail>(entity =>
            {
                entity.HasOne(d => d.Post)
                    .WithMany(p => p.PostDetails)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_post_detail_post_crawl");
            });

            modelBuilder.Entity<Rank>(entity =>
            {
                entity.HasOne(d => d.Channel)
                    .WithMany(p => p.Ranks)
                    .HasForeignKey(d => d.ChannelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rank_channel");

                entity.HasOne(d => d.RankType)
                    .WithMany(p => p.Ranks)
                    .HasForeignKey(d => d.RankTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_rank_rank_type");
            });

            modelBuilder.Entity<Reaction>(entity =>
            {
                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Reactions)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_reaction_post_crawl");

                entity.HasOne(d => d.ReactionType)
                    .WithMany(p => p.Reactions)
                    .HasForeignKey(d => d.ReactionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_reaction_reaction_type");
            });

            modelBuilder.Entity<Target>(entity =>
            {
                entity.HasOne(d => d.TargetType)
                    .WithMany(p => p.Targets)
                    .HasForeignKey(d => d.TargetTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_target_target_type");
            });

            modelBuilder.Entity<TransactionDeposit>(entity =>
            {
                entity.Property(e => e.CardType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Code)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Locale)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrderInfor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrderType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TmnCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TransNoId)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TxnRef)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Gateway)
                    .WithMany(p => p.TransactionDeposits)
                    .HasForeignKey(d => d.GatewayId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_transaction_deposit_GateWay");

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.TransactionDeposits)
                    .HasForeignKey(d => d.WalletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_transaction_deposit_wallet");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Firstname).IsUnicode(false);

                entity.Property(e => e.Lastname).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.Username).IsUnicode(false);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_user_role");
            });

            modelBuilder.Entity<Wallet>(entity =>
            {
                entity.Property(e => e.Currency).IsFixedLength(true);

                entity.Property(e => e.Status).IsFixedLength(true);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Wallets)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_wallet_user");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}